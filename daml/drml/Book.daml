-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Book where
import DA.Action (when)
import DA.Time
import DA.List
import Iou

template Author
  with
    author : Party
  where
    signatory author
    key author : Party
    maintainer key

    nonconsuming choice ProposeBookDeal : ContractId (Proposal BookDeal)
      with
        bookDeal : BookDeal
      controller author
        do
          create Proposal
            with
              proposer = author
              receiver = bookDeal.publisher
              proposal = bookDeal

template Publisher
  with
    publisher : Party
  where
    signatory publisher
    key publisher : Party
    maintainer key

    nonconsuming choice OfferBookVolume : ContractId BookVolumeLicenseCostlyProposal
      with
        volumeLicense : BookVolumeLicense
        price : Amount
      controller publisher
      do
        _bookDeal <- fetchByKey @BookDeal
          ( volumeLicense.book.author
          , volumeLicense.publisher
          , volumeLicense.book.isbn
          )
        create BookVolumeLicenseCostlyProposal
          with
            proposal = volumeLicense
            cost = price

template Reseller
  with
    reseller : Party
  where
    signatory reseller
    key reseller : Party
    maintainer key

    nonconsuming choice SubscribeConsumers : ContractId BookListing
      with
        consumers : [Party]
      controller reseller
      do
        create BookListing
          with
            books = []
            ..

template Consumer
  with
    consumer : Party
  where
    signatory consumer
    key consumer : Party
    maintainer key

    nonconsuming choice BuyBook : ContractId BookPurchase
      with
        reseller : Party
        book : ISBN
        payment : ContractId Iou
      controller consumer
      do
        create BookPurchase with ..

template BookPurchase
  with
    consumer : Party
    reseller : Party
    book : ISBN
    payment : ContractId Iou
  where
    signatory consumer
    observer reseller

    choice AcceptPurchase : ContractId BookLicense
      with
        duration : RelTime
      controller reseller
      do
        exercise payment Transfer with newOwner = reseller
        (volumeId, _) <- fetchByKey @BookVolumeLicense (reseller, book)
        license <- exercise volumeId CreateLicense with reader = consumer
        exercise license GrantReadingPermission with ..
        return license

template BookListing
  with
    reseller : Party
    books : [ISBN]
    consumers : [Party]
  where
    signatory reseller
    key reseller : Party
    maintainer key
    observer consumers

    choice EnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = book :: books

    choice UnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = delete book books

type ISBN = Text

data Book = Book
  with
    isbn : ISBN
    content : Text
    title : Text
    author : Party
  deriving (Eq, Show)

template Template t => Proposal t
  with
    proposer: Party
    receiver: Party
    proposal: t
  where
    signatory proposer
    observer receiver

    choice Accept: ContractId t
      controller receiver
      do
        create proposal

    choice Reject: ()
      controller receiver
      do
        pure ()

template RoyaltyPayment
  with
    publisher: Party
    author: Party
    bookISBN: ISBN
    amount: Amount
  where
    signatory publisher
    observer author

    choice PayOut : ContractId Iou
      with
        iouId : ContractId Iou
      controller publisher
      do
        iou <- fetch iouId
        (dealId, deal) <- fetchByKey @BookDeal (author, publisher, bookISBN)

        assert (iou.amount.value == amount.value * deal.royalties && iou.amount.currency == amount.currency)

        exercise iouId Transfer with newOwner = author


template BookVolumeLicenseCostlyProposal
  with
    proposal : BookVolumeLicense
    cost : Amount
  where
    signatory proposal.publisher
    observer proposal.reseller

    choice AcceptAndPay : (ContractId BookVolumeLicense, ContractId RoyaltyPayment, ContractId Iou)
      with
        iouId : ContractId Iou
      controller proposal.reseller
      do
        iou <- fetch iouId
        assert (iou.amount == cost)

        iouId <- exercise iouId Transfer with newOwner = proposal.publisher
        payment <- create RoyaltyPayment with
          publisher = proposal.publisher
          author = proposal.book.author
          bookISBN = proposal.book.isbn
          amount = cost
        volumeLicense <- create proposal
        return (volumeLicense, payment, iouId)

    choice RejectDontPay : ()
      controller proposal.reseller
        do
          pure ()

template BookDeal
  with
    author : Party
    publisher : Party
    royalties : Decimal
    book : Book
  where
    signatory author, publisher
    key (author, publisher, book.isbn) : (Party, Party, ISBN)
    maintainer key._1, key._2

template instance BookDealProposal = Proposal BookDeal

template BookVolumeLicense
  with
    publisher : Party
    reseller : Party
    volume : Int
    book : Book
  where
    signatory publisher, reseller
    ensure volume > 0
    key (reseller, book.isbn) : (Party, ISBN)
    maintainer key._1

    choice CreateLicense: ContractId BookLicense
      with
        reader : Party
      controller reseller
      do
        volumeLicense <-
          when (volume > 1) do
            create this with volume = volume - 1
            return ()
        create BookLicense with ..

template BookLicense
  with
    reseller: Party
    reader: Party
    book: Book
  where
    signatory reseller
    observer reader
    key (reseller, reader, book.isbn) : (Party, Party, ISBN)
    maintainer key._1

    nonconsuming choice GrantReadingPermission: ContractId ReadingPermission
      with
        duration : RelTime
      controller reseller
      do
        now <- getTime
        create ReadingPermission with expiration = addRelTime now duration; ..

template ReadingPermission
  with
    reseller : Party
    reader : Party
    book : Book
    expiration : Time
  where
    signatory reseller
    observer reader

data Parties = Parties {
  authors : [Party],
  authorIds : [ContractId Author],
  publishers : [Party],
  publisherIds : [ContractId Publisher],
  resellers : [Party],
  resellerIds : [ContractId Reseller],
  consumers : [Party],
  consumerIds : [ContractId Consumer]
}

setupBookDeal author authorId publisher book royalties = scenario do
  let bookDeal = BookDeal with ..
  bdpId <- submit author do exercise authorId ProposeBookDeal with ..
  submit publisher do exercise bdpId Accept

setupVolumeLicense issuer publisher publisherId reseller volume book price = scenario do
  let
    volumeLicense = BookVolumeLicense with ..
    iou = Iou with owner = reseller; observers = []; amount = price; ..
  iouId <- submit issuer do create iou
  bvlpId <- submit publisher do exercise publisherId OfferBookVolume with ..
  submit reseller do
    res <- exercise bvlpId AcceptAndPay with ..
    exerciseByKey @BookListing reseller EnlistBook
          with
            book = volumeLicense.book.isbn
    return res

setup = scenario do
  -- Setup parties & role contracts
  authors <- mapA getParty [ "Author1", "Author2", "Author3" ]
  authorIds <- mapA (\a -> submit a do create Author with author = a) authors
  publishers <- mapA getParty [ "Publisher1", "Publisher2", "Publisher3" ]
  publisherIds <- mapA (\p -> submit p do create Publisher with publisher = p) publishers
  resellers <- mapA getParty [ "Reseller1", "Reseller2", "Reseller3" ]
  resellerIds <- mapA (\r -> submit r do create Reseller with reseller = r) resellers
  consumers <- mapA getParty [ "Consumer1", "Consumer2", "Consumer3" ]
  consumerIds <- mapA (\c -> submit c do create Consumer with consumer = c) consumers
  let parties = Parties with ..

  -- Book listings
  bookListingIds <- mapA (\(r, rid) -> submit r do exercise rid SubscribeConsumers with consumers) (zip resellers resellerIds)

  -- IOUs
  issuer <- getParty "Bank"
  authorIouIds    <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 10.0 "CHF") authors
  publisherIouIds <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 1000.0 "CHF") publishers
  resellerIouIds  <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 10000.0 "CHF") resellers
  consumerIouIds  <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 100.0 "CHF") consumers

  -- Book deals
  let
    books = [
      (Book with author = authors!!0; isbn = "0552124753"; title = "Title 1"; content = "Content 1"),
      (Book with author = authors!!0; isbn = "0552128481"; title = "Title 2"; content = "Content 2"),
      (Book with author = authors!!1; isbn = "0552140287"; title = "Title 3"; content = "Content 3"),
      (Book with author = authors!!1; isbn = "0552131067"; title = "Title 4"; content = "Content 4"),
      (Book with author = authors!!2; isbn = "0552131075"; title = "Title 5"; content = "Content 5"),
      (Book with author = authors!!2; isbn = "0552134627"; title = "Title 6"; content = "Content 6") ]
  bdId1 <- setupBookDeal (authors!!0) (authorIds!!0) (publishers!!0) (books!!0) 0.01
  bdId2 <- setupBookDeal (authors!!0) (authorIds!!0) (publishers!!1) (books!!1) 0.02
  bdId3 <- setupBookDeal (authors!!1) (authorIds!!1) (publishers!!2) (books!!2) 0.03
  bdId4 <- setupBookDeal (authors!!1) (authorIds!!1) (publishers!!0) (books!!3) 0.04
  bdId5 <- setupBookDeal (authors!!2) (authorIds!!2) (publishers!!1) (books!!4) 0.05
  bdId6 <- setupBookDeal (authors!!2) (authorIds!!2) (publishers!!2) (books!!5) 0.06

  -- Volume licenses
  (bvlId1 , rpId1 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!0) 100 (books!!0) (Amount 1000.0 "CHF")
  (bvlId2 , rpId2 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!0) 100 (books!!3) (Amount 1000.0 "CHF")
  (bvlId3 , rpId3 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!0) 100 (books!!1) (Amount 1000.0 "CHF")
  (bvlId4 , rpId4 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!0) 100 (books!!4) (Amount 1000.0 "CHF")
  (bvlId5 , rpId5 , _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!0) 100 (books!!2) (Amount 1000.0 "CHF")
  (bvlId6 , rpId6 , _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!0) 100 (books!!5) (Amount 1000.0 "CHF")
  (bvlId7 , rpId7 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!1) 100 (books!!0) (Amount 1000.0 "CHF")
  (bvlId8 , rpId8 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!1) 100 (books!!3) (Amount 1000.0 "CHF")
  (bvlId9 , rpId9 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!1) 100 (books!!1) (Amount 1000.0 "CHF")
  (bvlId10, rpId10, _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!1) 100 (books!!4) (Amount 1000.0 "CHF")
  (bvlId11, rpId11, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!1) 100 (books!!2) (Amount 1000.0 "CHF")
  (bvlId12, rpId12, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!1) 100 (books!!5) (Amount 1000.0 "CHF")

  -- Licenses
  blId1  <- submit (resellers!!0) do exercise bvlId1 CreateLicense with reader = consumers!!0
  blId2  <- submit (resellers!!0) do exercise bvlId2 CreateLicense with reader = consumers!!1
  blId3  <- submit (resellers!!0) do exercise bvlId3 CreateLicense with reader = consumers!!2
  blId4  <- submit (resellers!!0) do exercise bvlId4 CreateLicense with reader = consumers!!0
  blId5  <- submit (resellers!!0) do exercise bvlId5 CreateLicense with reader = consumers!!1
  blId6  <- submit (resellers!!0) do exercise bvlId6 CreateLicense with reader = consumers!!2
  blId7  <- submit (resellers!!1) do exercise bvlId7 CreateLicense with reader = consumers!!0
  blId8  <- submit (resellers!!1) do exercise bvlId8 CreateLicense with reader = consumers!!1
  blId9  <- submit (resellers!!1) do exercise bvlId9 CreateLicense with reader = consumers!!2
  blId10 <- submit (resellers!!1) do exercise bvlId10 CreateLicense with reader = consumers!!0
  blId11 <- submit (resellers!!1) do exercise bvlId11 CreateLicense with reader = consumers!!1
  blId12 <- submit (resellers!!1) do exercise bvlId12 CreateLicense with reader = consumers!!2

  pure (parties, books)

inDemoPurchaseBook reseller consumer duration = scenario
  do
    (resellerId, _) <- reseller `submit` fetchByKey @Reseller reseller
    (consumerId, _) <- consumer `submit` fetchByKey @Consumer consumer
    issuer <- getParty "Bank"
    chf10Id <- issuer `submit` create Iou with issuer; owner = consumer; observers = []; amount = Amount 10.0 "CHF"
    purchase <- consumer `submit`
      do
        (_, listing) <- fetchByKey @BookListing reseller
        let book = listing.books!!0
        payment <- exercise chf10Id Disclose with newObserver = reseller
        exercise consumerId BuyBook with ..
    reseller `submit` exercise purchase AcceptPurchase with ..

demoBeforeBankrupt = scenario
  do
    (parties@Parties {..}, books) <- setup
    issuer <- getParty "Bank"

    -- Do this during demo
    -- inDemoPurchaseBook (resellers!!0) (consumers!!0) (seconds 10)

    return (parties, books)
  
testBookDeal = scenario
  do
    (parties, _books) <- setup
    issuer <- getParty "Bank"

    -- Test book purchase
    do
      let reseller :: _ = parties.resellers
          resellerId :: _ = parties.resellerIds
          consumer :: _ = parties.consumers
          consumerId :: _ = parties.consumerIds
      chf100Id <- issuer `submit` create Iou with issuer; owner = consumer; observers = []; amount = Amount 100.0 "CHF"
      purchases <- consumer `submit`
        do
          -- Look up book
          (_, listing) <- fetchByKey @BookListing reseller
          let bookA :: bookB :: _ = listing.books
          -- Prepare change
          (chf10AId, chf90Id) <- exercise chf100Id Split with newAmount = 10.0
          (chf10BId, chf80Id) <- exercise chf90Id Split with newAmount = 10.0
          chf10AId <- exercise chf10AId Disclose with newObserver = reseller
          chf10BId <- exercise chf10BId Disclose with newObserver = reseller
          -- Request purchase
          purchaseA <- exercise consumerId BuyBook with book = bookA; payment = chf10AId; ..
          purchaseB <- exercise consumerId BuyBook with book = bookB; payment = chf10BId; ..
          return [purchaseA, purchaseB]
      mapA (\purchase -> reseller `submit` exercise purchase AcceptPurchase with duration = days 14) purchases
      return ()
