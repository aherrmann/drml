-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Book where
import DA.Action (when)
import DA.Time
import DA.List
import Iou

template Author
  with
    author : Party
  where
    signatory author
    key author : Party
    maintainer key

    nonconsuming choice ProposeBookDeal : ContractId (Proposal BookDeal)
      with
        bookDeal : BookDeal
      controller author
        do
          create Proposal
            with
              proposer = author
              receiver = bookDeal.publisher
              proposal = bookDeal

template Publisher
  with
    publisher : Party
  where
    signatory publisher
    key publisher : Party
    maintainer key

    nonconsuming choice OfferBookVolume : ContractId BookVolumeLicenseCostlyProposal
      with
        volumeLicense : BookVolumeLicense
        price : Amount
      controller publisher
      do
        _bookDeal <- fetchByKey @BookDeal
          ( volumeLicense.book.author
          , volumeLicense.publisher
          , volumeLicense.book.isbn
          )
        create BookVolumeLicenseCostlyProposal
          with
            proposal = volumeLicense
            cost = price

template Reseller
  with
    reseller : Party
  where
    signatory reseller
    key reseller : Party
    maintainer key

    nonconsuming choice SubscribeConsumers : ContractId BookListing
      with
        consumers : [Party]
      controller reseller
      do
        create BookListing
          with
            books = []
            ..

template Consumer
  with
    consumer : Party
  where
    signatory consumer
    key consumer : Party
    maintainer key

    nonconsuming choice BuyBook : ContractId BookPurchase
      with
        reseller : Party
        book : ISBN
        payment : ContractId Iou
      controller consumer
      do
        create BookPurchase with ..

template BookPurchase
  with
    consumer : Party
    reseller : Party
    book : ISBN
    payment : ContractId Iou
  where
    signatory consumer
    observer reseller

    choice AcceptPurchase : ContractId BookLicense
      controller reseller
      do
        exercise payment Transfer with newOwner = reseller
        (volumeId, _) <- fetchByKey @BookVolumeLicense (reseller, book)
        exercise volumeId CreateLicense with reader = consumer

template BookListing
  with
    reseller : Party
    books : [ISBN]
    consumers : [Party]
  where
    signatory reseller
    key reseller : Party
    maintainer key
    observer consumers

    choice EnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = book :: books

    choice UnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = delete book books

type ISBN = Text

data Book = Book
  with
    isbn : ISBN
    content : Text
    title : Text
    author : Party
  deriving (Eq, Show)

template Template t => Proposal t
  with
    proposer: Party
    receiver: Party
    proposal: t
  where
    signatory proposer
    observer receiver

    choice Accept: ContractId t
      controller receiver
      do
        create proposal

    choice Reject: ()
      controller receiver
      do
        pure ()

template RoyaltyPayment
  with
    publisher: Party
    author: Party
    bookISBN: ISBN
    amount: Amount
  where
    signatory publisher
    observer author

    choice PayOut : ContractId Iou
      with
        iouId : ContractId Iou
      controller publisher
      do
        iou <- fetch iouId
        (dealId, deal) <- fetchByKey @BookDeal (author, publisher, bookISBN)

        assert (iou.amount.value == amount.value * deal.royalties && iou.amount.currency == amount.currency)

        exercise iouId Transfer with newOwner = author


template BookVolumeLicenseCostlyProposal
  with
    proposal : BookVolumeLicense
    cost : Amount
  where
    signatory proposal.publisher
    observer proposal.reseller

    choice AcceptAndPay : (ContractId BookVolumeLicense, ContractId RoyaltyPayment, ContractId Iou)
      with
        iouId : ContractId Iou
      controller proposal.reseller
      do
        iou <- fetch iouId
        assert (iou.amount == cost)

        iouId <- exercise iouId Transfer with newOwner = proposal.publisher
        payment <- create RoyaltyPayment with
          publisher = proposal.publisher
          author = proposal.book.author
          bookISBN = proposal.book.isbn
          amount = cost
        volumeLicense <- create proposal
        return (volumeLicense, payment, iouId)

    choice RejectDontPay : ()
      controller proposal.reseller
        do
          pure ()

template BookDeal
  with
    author : Party
    publisher : Party
    royalties : Decimal
    book : Book
  where
    signatory author, publisher
    key (author, publisher, book.isbn) : (Party, Party, ISBN)
    maintainer key._1, key._2

template instance BookDealProposal = Proposal BookDeal

template BookVolumeLicense
  with
    publisher : Party
    reseller : Party
    volume : Int
    book : Book
  where
    signatory publisher, reseller
    ensure volume > 0
    key (reseller, book.isbn) : (Party, ISBN)
    maintainer key._1

    choice CreateLicense: ContractId BookLicense
      with
        reader : Party
      controller reseller
      do
        volumeLicense <-
          when (volume > 1) do
            create this with volume = volume - 1
            return ()
        create BookLicense with ..

    choice TransferBookVolumeLicense: ContractId BookVolumeLicense
      with
        newReseller : Party
      controller reseller
      do
        create BookVolumeLicense with reseller = newReseller; ..

template BookLicense
  with
    reseller: Party
    reader: Party
    book: Book
  where
    signatory reseller
    observer reader
    key (reseller, reader, book.isbn) : (Party, Party, ISBN)
    maintainer key._1

    nonconsuming choice GrantReadingPermission: ContractId ReadingPermission
      with
        duration : RelTime
      controller reseller
      do
        now <- getTime
        create ReadingPermission with expiration = addRelTime now duration; ..

template ReadingPermission
  with
    reseller : Party
    reader : Party
    book : Book
    expiration : Time
  where
    signatory reseller
    observer reader

setupBookDeal author authorId publisher book royalties = scenario do
  let bookDeal = BookDeal with ..
  bdpId <- submit author do exercise authorId ProposeBookDeal with ..
  submit publisher do exercise bdpId Accept

setupVolumeLicense issuer publisher publisherId reseller volume book price = scenario do
  let
    volumeLicense = BookVolumeLicense with ..
    iou = Iou with owner = reseller; observers = []; amount = price; ..
  iouId <- submit issuer do create iou
  bvlpId <- submit publisher do exercise publisherId OfferBookVolume with ..
  submit reseller do exercise bvlpId AcceptAndPay with ..
 
setup = scenario do
  -- Role contracts
  authors <- mapA getParty [ "Author1", "Author2", "Author3" ]
  authorIds <- mapA (\a -> submit a do create Author with author = a) authors
  publishers <- mapA getParty [ "Publisher1", "Publisher2", "Publisher3" ]
  publisherIds <- mapA (\p -> submit p do create Publisher with publisher = p) publishers
  resellers <- mapA getParty [ "Reseller1", "Reseller2", "Reseller3" ]
  resellerIds <- mapA (\r -> submit r do create Reseller with reseller = r) resellers
  consumers <- mapA getParty [ "Consumer1", "Consumer2", "Consumer3" ]
  consumerIds <- mapA (\c -> submit c do create Consumer with consumer = c) consumers

  -- Book listings
  bookListingIds <- mapA (\(r, rid) -> submit r do exercise rid SubscribeConsumers with consumers) (zip resellers resellerIds)

  -- IOUs
  issuer <- getParty "Bank"
  authorIouIds    <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 10.0 "CHF") authors
  publisherIouIds <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 1000.0 "CHF") publishers
  resellerIouIds  <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 10000.0 "CHF") resellers
  consumerIouIds  <- mapA (\p -> submit issuer do create Iou with issuer; owner = p; observers = []; amount = Amount 100.0 "CHF") consumers

  -- Book deals
  let 
    books = [
      (Book with author = authors!!0; isbn = "ISBN 1"; title = "Title 1"; content = "Content 1"),
      (Book with author = authors!!0; isbn = "ISBN 2"; title = "Title 2"; content = "Content 2"),
      (Book with author = authors!!1; isbn = "ISBN 3"; title = "Title 3"; content = "Content 3"),
      (Book with author = authors!!1; isbn = "ISBN 4"; title = "Title 4"; content = "Content 4"),
      (Book with author = authors!!2; isbn = "ISBN 5"; title = "Title 5"; content = "Content 5"),
      (Book with author = authors!!2; isbn = "ISBN 6"; title = "Title 6"; content = "Content 6") ]
  bdId1 <- setupBookDeal (authors!!0) (authorIds!!0) (publishers!!0) (books!!0) 0.01
  bdId2 <- setupBookDeal (authors!!0) (authorIds!!0) (publishers!!1) (books!!1) 0.02
  bdId3 <- setupBookDeal (authors!!1) (authorIds!!1) (publishers!!2) (books!!2) 0.03
  bdId4 <- setupBookDeal (authors!!1) (authorIds!!1) (publishers!!0) (books!!3) 0.04
  bdId5 <- setupBookDeal (authors!!2) (authorIds!!2) (publishers!!1) (books!!4) 0.05
  bdId6 <- setupBookDeal (authors!!2) (authorIds!!2) (publishers!!2) (books!!5) 0.06

  -- Volume licenses
  (bvlId1 , rpId1 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!0) 100 (books!!0) (Amount 1000.0 "CHF")
  (bvlId2 , rpId2 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!0) 100 (books!!3) (Amount 1000.0 "CHF")
  (bvlId3 , rpId3 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!0) 100 (books!!1) (Amount 1000.0 "CHF")
  (bvlId4 , rpId4 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!0) 100 (books!!4) (Amount 1000.0 "CHF")
  (bvlId5 , rpId5 , _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!0) 100 (books!!2) (Amount 1000.0 "CHF")
  (bvlId6 , rpId6 , _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!0) 100 (books!!5) (Amount 1000.0 "CHF")
  (bvlId7 , rpId7 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!1) 100 (books!!0) (Amount 1000.0 "CHF")
  (bvlId8 , rpId8 , _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!1) 100 (books!!3) (Amount 1000.0 "CHF")
  (bvlId9 , rpId9 , _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!1) 100 (books!!1) (Amount 1000.0 "CHF")
  (bvlId10, rpId10, _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!1) 100 (books!!4) (Amount 1000.0 "CHF")
  (bvlId11, rpId11, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!1) 100 (books!!2) (Amount 1000.0 "CHF")
  (bvlId12, rpId12, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!1) 100 (books!!5) (Amount 1000.0 "CHF")
  (bvlId13, rpId13, _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!2) 100 (books!!0) (Amount 1000.0 "CHF")
  (bvlId14, rpId14, _) <- setupVolumeLicense issuer (publishers!!0) (publisherIds!!0) (resellers!!2) 100 (books!!3) (Amount 1000.0 "CHF")
  (bvlId15, rpId15, _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!2) 100 (books!!1) (Amount 1000.0 "CHF")
  (bvlId16, rpId16, _) <- setupVolumeLicense issuer (publishers!!1) (publisherIds!!1) (resellers!!2) 100 (books!!4) (Amount 1000.0 "CHF")
  (bvlId17, rpId17, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!2) 100 (books!!2) (Amount 1000.0 "CHF")
  (bvlId18, rpId18, _) <- setupVolumeLicense issuer (publishers!!2) (publisherIds!!2) (resellers!!2) 100 (books!!5) (Amount 1000.0 "CHF")

  -- Licenses
  blId1  <- submit (resellers!!0) do exercise bvlId1 CreateLicense with reader = consumers!!0
  blId2  <- submit (resellers!!0) do exercise bvlId2 CreateLicense with reader = consumers!!1
  blId3  <- submit (resellers!!0) do exercise bvlId3 CreateLicense with reader = consumers!!2
  blId4  <- submit (resellers!!0) do exercise bvlId4 CreateLicense with reader = consumers!!0
  blId5  <- submit (resellers!!0) do exercise bvlId5 CreateLicense with reader = consumers!!1
  blId6  <- submit (resellers!!0) do exercise bvlId6 CreateLicense with reader = consumers!!2
  blId7  <- submit (resellers!!1) do exercise bvlId7 CreateLicense with reader = consumers!!0
  blId8  <- submit (resellers!!1) do exercise bvlId8 CreateLicense with reader = consumers!!1
  blId9  <- submit (resellers!!1) do exercise bvlId9 CreateLicense with reader = consumers!!2
  blId10 <- submit (resellers!!1) do exercise bvlId10 CreateLicense with reader = consumers!!0
  blId11 <- submit (resellers!!1) do exercise bvlId11 CreateLicense with reader = consumers!!1
  blId12 <- submit (resellers!!1) do exercise bvlId12 CreateLicense with reader = consumers!!2
  blId13 <- submit (resellers!!2) do exercise bvlId13 CreateLicense with reader = consumers!!0
  blId14 <- submit (resellers!!2) do exercise bvlId14 CreateLicense with reader = consumers!!1
  blId15 <- submit (resellers!!2) do exercise bvlId15 CreateLicense with reader = consumers!!2
  blId16 <- submit (resellers!!2) do exercise bvlId16 CreateLicense with reader = consumers!!0
  blId17 <- submit (resellers!!2) do exercise bvlId17 CreateLicense with reader = consumers!!1
  blId18 <- submit (resellers!!2) do exercise bvlId18 CreateLicense with reader = consumers!!2

  pure ()

testBookDeal = scenario
  do
    consumerA <- getParty "Consumer:A"
    consumerAId <- consumerA `submit` create Consumer with consumer = consumerA
    consumerB <- getParty "Consumer:B"
    consumerBId <- consumerB `submit` create Consumer with consumer = consumerB

    author <- getParty "BestAuthor"
    authorId <- author `submit` create Author with ..

    publisher <- getParty "BestPublisher"
    publisherId <- publisher `submit` create Publisher with ..

    reseller <- getParty "BestReseller"
    resellerId <- reseller `submit` create Reseller with ..

    bookListingId <- reseller `submit` exercise resellerId SubscribeConsumers with consumers = [consumerA, consumerB]

    let chf1000 = Amount 1000.0 "CHF"
    bank <- getParty "BestBank"
    iouId <- bank `submit` create Iou
              with
                issuer = bank
                owner = reseller
                amount = chf1000
                observers = []

    let book = Book
          with
            author = author
            title = "The best book"
            content = "This is the best book"
            isbn = "b3st-isbn"
    let bookDeal = BookDeal
          with
            author = author
            publisher = publisher
            book = book
            royalties = 0.10
    bookDealProposalId <- author `submit` exercise authorId ProposeBookDeal with bookDeal
    bookDealId <- publisher `submit` exercise bookDealProposalId Accept
    bookDeal <- publisher `submit` fetch bookDealId
    let bookVolumeLicense = BookVolumeLicense
          with
            volume = 100
            book = bookDeal.book
            ..
    bookVolumeProposal <- publisher `submit` exercise publisherId OfferBookVolume
      with
        price = chf1000
        volumeLicense = bookVolumeLicense

    (volumeLicenseId, royaltyPayment, iouForPublisher) <- reseller `submit` exercise bookVolumeProposal AcceptAndPay
      with
        iouId

    iouAId <- bank `submit` create Iou
      with
        issuer = bank
        owner = consumerA
        amount = Amount 10.0 "CHF"
        observers = []
    iouAId <- consumerA `submit` exercise iouAId Disclose with newObserver = reseller
    purchaseAId <- consumerA `submit` exercise consumerAId BuyBook
      with
        reseller = reseller
        book = book.isbn
        payment = iouAId
    bookLicenseA <- reseller `submit` exercise purchaseAId AcceptPurchase

    iouBId <- bank `submit` create Iou
      with
        issuer = bank
        owner = consumerB
        amount = Amount 10.0 "CHF"
        observers = []
    iouBId <- consumerB `submit` exercise iouBId Disclose with newObserver = reseller
    purchaseBId <- consumerB `submit` exercise consumerBId BuyBook
      with
        reseller = reseller
        book = book.isbn
        payment = iouBId
    bookLicenseB <- reseller `submit` exercise purchaseBId AcceptPurchase

    reseller `submit`
      do
        volumeLicenseA <- fetch bookLicenseA
        exerciseByKey @BookListing reseller EnlistBook
          with
            book = volumeLicenseA.book.isbn

    readingPermissionA <- reseller `submit` exercise bookLicenseA GrantReadingPermission with duration = minutes 1
    readingPermissionB <- reseller `submit` exercise bookLicenseB GrantReadingPermission with duration = minutes 1

    (iouForAuthor, _) <- publisher `submit` exercise iouForPublisher Split with newAmount = 100.0
    publisher `submit` exercise royaltyPayment PayOut with iouId = iouForAuthor
    return ()
