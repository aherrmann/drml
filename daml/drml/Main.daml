-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where
import DA.Action (when)
import DA.Time
import Iou

template Author
  with
    author : Party
  where
    signatory author
    key author : Party
    maintainer key

    nonconsuming choice ProposeBookDeal : ContractId (Proposal BookDeal)
      with
        bookDeal : BookDeal
      controller author
        do
          create Proposal
            with
              proposer = author
              receiver = bookDeal.publisher
              proposal = bookDeal

template Publisher
  with
    publisher : Party
  where
    signatory publisher
    key publisher : Party
    maintainer key

    nonconsuming choice OfferBookVolume : ContractId BookVolumeLicenseCostlyProposal
      with
        volumeLicense : BookVolumeLicense
        price : Amount
      controller publisher
      do
        _bookDeal <- fetchByKey @BookDeal
          ( volumeLicense.book.author
          , volumeLicense.publisher
          , volumeLicense.book.isbn
          )
        create BookVolumeLicenseCostlyProposal
          with
            proposal = volumeLicense
            cost = price

template Reseller
  with
    reseller : Party
  where
    signatory reseller
    key reseller : Party
    maintainer key

type ISBN = Text

data Book = Book
  with
    isbn : ISBN
    content : Text
    title : Text
    author : Party
  deriving (Eq, Show)

template Template t => Proposal t
  with
    proposer: Party
    receiver: Party
    proposal: t
  where
    signatory proposer
    observer receiver

    choice Accept: ContractId t
      controller receiver
      do
        create proposal

    choice Reject: ()
      controller receiver
      do
        pure ()

template RoyaltyPayment
  with
    publisher: Party
    author: Party
    bookISBN: ISBN
    amount: Amount
  where
    signatory publisher
    observer author

    choice PayOut : ContractId Iou
      with
        iouId : ContractId Iou
      controller publisher
      do
        iou <- fetch iouId
        (dealId, deal) <- fetchByKey @BookDeal (author, publisher, bookISBN)

        assert (iou.amount.value == amount.value * deal.royalties && iou.amount.currency == amount.currency)

        exercise iouId Transfer with newOwner = author


template BookVolumeLicenseCostlyProposal
  with
    proposal : BookVolumeLicense
    cost : Amount
  where
    signatory proposal.publisher
    observer proposal.reseller

    choice AcceptAndPay : (ContractId BookVolumeLicense, ContractId RoyaltyPayment, ContractId Iou)
      with
        iouId : ContractId Iou
      controller proposal.reseller
      do
        iou <- fetch iouId
        assert (iou.amount == cost)

        iouId <- exercise iouId Transfer with newOwner = proposal.publisher
        payment <- create RoyaltyPayment with
          publisher = proposal.publisher
          author = proposal.book.author
          bookISBN = proposal.book.isbn
          amount = cost
        volumeLicense <- create proposal
        return (volumeLicense, payment, iouId)

    choice RejectDontPay : ()
      controller proposal.reseller
        do
          pure ()

template BookDeal
  with
    author : Party
    publisher : Party
    royalties : Decimal
    book : Book
  where
    signatory author, publisher
    key (author, publisher, book.isbn) : (Party, Party, ISBN)
    maintainer key._1, key._2

template instance BookDealProposal = Proposal BookDeal

template BookVolumeLicense
  with
    publisher : Party
    reseller : Party
    volume : Int
    book : Book
  where
    signatory publisher, reseller
    ensure volume > 0
    key (reseller, book.isbn) : (Party, ISBN)
    maintainer key._1

    choice CreateLicense: ContractId BookLicense
      with
        reader : Party
      controller reseller
      do
        volumeLicense <-
          when (volume > 1) do
            create this with volume = volume - 1
            return ()
        create BookLicense with ..

    choice TransferBookVolumeLicense: ContractId BookVolumeLicense
      with
        newReseller : Party
      controller reseller
      do
        create BookVolumeLicense with reseller = newReseller; ..

template BookLicense
  with
    reseller: Party
    reader: Party
    book: Book
  where
    signatory reseller
    observer reader
    key (reseller, reader, book.isbn) : (Party, Party, ISBN)
    maintainer key._1

    nonconsuming choice GrantReadingPermission: ContractId ReadingPermission
      with
        duration : RelTime
      controller reseller
      do
        now <- getTime
        create ReadingPermission with expiration = addRelTime now duration; ..

template ReadingPermission
  with
    reseller : Party
    reader : Party
    book : Book
    expiration : Time
  where
    signatory reseller
    observer reader

testBookDeal = scenario
  do
    author <- getParty "BestAuthor"
    authorId <- author `submit` create Author with ..

    publisher <- getParty "BestPublisher"
    publisherId <- publisher `submit` create Publisher with ..

    reseller <- getParty "BestReseller"
    resellerId <- reseller `submit` create Reseller with ..

    let chf1000 = Amount 1000.0 "CHF"
    bank <- getParty "BestBank"
    iouId <- bank `submit` create Iou
              with
                issuer = bank
                owner = reseller
                amount = chf1000

    let book = Book
          with
            author = author
            title = "The best book"
            content = "This is the best book"
            isbn = "b3st-isbn"
    let bookDeal = BookDeal
          with
            author = author
            publisher = publisher
            book = book
            royalties = 0.10
    bookDealProposalId <- author `submit` exercise authorId ProposeBookDeal with bookDeal
    bookDealId <- publisher `submit` exercise bookDealProposalId Accept
    bookDeal <- publisher `submit` fetch bookDealId
    let bookVolumeLicense = BookVolumeLicense
          with
            volume = 100
            book = bookDeal.book
            ..
    bookVolumeProposal <- publisher `submit` exercise publisherId OfferBookVolume
      with
        price = chf1000
        volumeLicense = bookVolumeLicense

    (volumeLicenseId, royaltyPayment, iouForPublisher) <- reseller `submit` exercise bookVolumeProposal AcceptAndPay
      with
        iouId
    readerA <- getParty "Reader:A"
    readerB <- getParty "Reader:B"
    bookLicenseA <- reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerA
    bookLicenseB <- reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerB

    readingPermissionA <- reseller `submit` exercise bookLicenseA GrantReadingPermission with duration = minutes 1
    readingPermissionB <- reseller `submit` exercise bookLicenseB GrantReadingPermission with duration = minutes 1

    (iouForAuthor, _) <- publisher `submit` exercise iouForPublisher Split with newAmount = 100.0
    publisher `submit` exercise royaltyPayment PayOut with iouId = iouForAuthor
    return ()
