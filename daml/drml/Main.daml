-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where
import DA.Action (when)
import DA.List (delete)
import Iou

template Author
  with
    author : Party
  where
    signatory author
    controller author can
    key author : Party
    maintainer key

    nonconsuming choice ProposeBookDeal : ContractId (Proposal BookDeal)
      with
        bookDeal : BookDeal
      controller author
        do
          create Proposal
            with
              proposer = author
              receiver = bookDeal.publisher
              proposal = bookDeal

template Publisher
  with
    publisher : Party
  where
    signatory publisher
    controller publisher can
    key publisher : Party
    maintainer key

    nonconsuming choice OfferBookVolume : ContractId BookVolumeLicenseCostlyProposal
      with
        volumeLicense : BookVolumeLicense
        price : Amount
      controller publisher
      do
        _bookDeal <- fetchByKey @BookDeal
          ( volumeLicense.book.author
          , volumeLicense.publisher
          , volumeLicense.book.isbn
          )
        create BookVolumeLicenseCostlyProposal
          with
            proposal = volumeLicense
            cost = price

template Reseller
  with
    reseller : Party
  where
    signatory reseller
    controller reseller can
    key reseller : Party
    maintainer key

    nonconsuming choice SubscribeConsumers : ContractId BookListing
      with
        consumers : [Party]
      controller reseller
      do
        create BookListing
          with
            books = []
            ..

template Consumer
  with
    consumer : Party
  where
    signatory consumer
    key consumer : Party
    maintainer key

template BookListing
  with
    reseller : Party
    books : [ISBN]
    consumers : [Party]
  where
    signatory reseller
    key reseller : Party
    maintainer key
    observer consumers

    choice EnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = book :: books

    choice UnlistBook : ContractId BookListing
      with
        book : ISBN
      controller reseller
      do
        create this with books = delete book books

type ISBN = Text

data Book = Book
  with
    isbn : ISBN
    content : Text
    title : Text
    author : Party
  deriving (Eq, Show)

template BookLicense
  with
    publisher: Party
    reader: Party
    book: Book
  where
    signatory publisher
    observer reader

template Template t => Proposal t
  with
    proposer: Party
    receiver: Party
    proposal: t
  where
    signatory proposer
    observer receiver

    choice Accept: ContractId t
      controller receiver
      do
        create proposal

    choice Reject: ()
      controller receiver
      do
        pure ()

template RoyaltyPayment
  with
    publisher: Party
    author: Party
    bookISBN: ISBN
    amount: Amount
  where
    signatory publisher
    observer author

    choice PayOut : ContractId Iou
      with
        iouId : ContractId Iou
      controller publisher
      do
        iou <- fetch iouId
        (dealId, deal) <- fetchByKey @BookDeal (author, publisher, bookISBN)

        assert (iou.amount.value == amount.value * deal.royalties && iou.amount.currency == amount.currency)

        exercise iouId Transfer with newOwner = author


template BookVolumeLicenseCostlyProposal
  with
    proposal : BookVolumeLicense
    cost : Amount
  where
    signatory proposal.publisher
    observer proposal.reseller

    choice AcceptAndPay : (ContractId BookVolumeLicense, ContractId RoyaltyPayment, ContractId Iou)
      with
        iouId : ContractId Iou
      controller proposal.reseller
      do
        iou <- fetch iouId
        assert (iou.amount == cost)

        iouId <- exercise iouId Transfer with newOwner = proposal.publisher
        payment <- create RoyaltyPayment with
          publisher = proposal.publisher
          author = proposal.book.author
          bookISBN = proposal.book.isbn
          amount = cost
        volumeLicense <- create proposal
        return (volumeLicense, payment, iouId)

    choice RejectDontPay : ()
      controller proposal.reseller
        do
          pure ()

template BookDeal
  with
    author : Party
    publisher : Party
    royalties : Decimal
    book : Book
  where
    signatory author, publisher
    key (author, publisher, book.isbn) : (Party, Party, ISBN)
    maintainer key._1, key._2

template instance BookDealProposal = Proposal BookDeal

template BookVolumeLicense
  with
    publisher : Party
    reseller : Party
    volume : Int
    book : Book
  where
    signatory publisher, reseller
    ensure volume > 0
    key (reseller, book.isbn) : (Party, ISBN)
    maintainer key._1

    choice CreateLicense: ContractId BookLicense
      with
        reader : Party
      controller reseller
      do
        volumeLicense <-
          when (volume > 1) do
            create this with volume = volume - 1
            return ()
        create BookLicense with ..

testBookDeal = scenario
  do
    readerA <- getParty "Reader A"
    readerAId <- readerA `submit` create Consumer with consumer = readerA
    readerB <- getParty "Reader B"
    readerBId <- readerB `submit` create Consumer with consumer = readerB

    author <- getParty "BestAuthor"
    authorId <- author `submit` create Author with ..

    publisher <- getParty "BestPublisher"
    publisherId <- publisher `submit` create Publisher with ..

    reseller <- getParty "BestReseller"
    resellerId <- reseller `submit` create Reseller with ..

    bookListingId <- reseller `submit` exercise resellerId SubscribeConsumers with consumers = [readerA, readerB]

    let chf1000 = Amount 1000.0 "CHF"
    bank <- getParty "BestBank"
    iouId <- bank `submit` create Iou
              with
                issuer = bank
                owner = reseller
                amount = chf1000

    let book = Book
          with
            author = author
            title = "The best book"
            content = "This is the best book"
            isbn = "b3st-isbn"
    let bookDeal = BookDeal
          with
            author = author
            publisher = publisher
            book = book
            royalties = 0.10
    bookDealProposalId <- author `submit` exercise authorId ProposeBookDeal with bookDeal
    bookDealId <- publisher `submit` exercise bookDealProposalId Accept
    bookDeal <- publisher `submit` fetch bookDealId
    let bookVolumeLicense = BookVolumeLicense
          with
            volume = 100
            book = bookDeal.book
            ..
    bookVolumeProposal <- publisher `submit` exercise publisherId OfferBookVolume
      with
        price = chf1000
        volumeLicense = bookVolumeLicense

    (volumeLicenseId, royaltyPayment, iouForPublisher) <- reseller `submit` exercise bookVolumeProposal AcceptAndPay
      with
        iouId
    reseller `submit`
      do
        volumeLicense <- fetch volumeLicenseId
        exerciseByKey @BookListing reseller EnlistBook
          with
            book = volumeLicense.book.isbn

    reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerA
    reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerB

    (iouForAuthor, _) <- publisher `submit` exercise iouForPublisher Split with newAmount = 100.0
    publisher `submit` exercise royaltyPayment PayOut with iouId = iouForAuthor
    return ()

type AssetId = ContractId Asset

template Asset
  with
    issuer : Party
    owner  : Party
    name   : Text
  where
    ensure name /= ""
    signatory issuer
    controller owner can
      Give : AssetId
        with
          newOwner : Party
        do
          create this with
            owner = newOwner

setup = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  aliceTV <- submit alice do
    create Asset with
      issuer = alice
      owner = alice
      name = "TV"

  bobTV <- submit alice do
    exercise aliceTV Give with newOwner = bob

  submit bob do
    exercise bobTV Give with newOwner = alice
