-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main where
import DA.Action (when)
import Iou

template Author
  with
    author : Party
  where
    signatory author
    controller author can
    key author : Party
    maintainer key

    choice ProposeBookDeal : ContractId (Proposal BookDeal)
      with
        bookDeal : BookDeal
      controller author
        do
          _publisherContract <- fetchByKey @Publisher bookDeal.publisher
          create Proposal
            with
              proposer = author
              receiver = bookDeal.publisher
              proposal = bookDeal

template Publisher
  with
    publisher : Party
  where
    signatory publisher
    controller publisher can
    key publisher : Party
    maintainer key

    choice OfferBookVolume : ContractId BookVolumeLicenseCostlyProposal
      with
        volumeLicense : BookVolumeLicense
        price : Amount
      controller publisher
      do
        _bookDeal <- fetchByKey @BookDeal
          ( volumeLicense.book.author
          , volumeLicense.publisher
          , volumeLicense.book.isbn
          )
        create BookVolumeLicenseCostlyProposal
          with
            proposal = volumeLicense
            cost = price

template Reseller
  with
    reseller : Party
  where
    signatory reseller
    controller reseller can
    key reseller : Party
    maintainer key

type ISBN = Text

data Book = Book
  with
    isbn : ISBN
    content : Text
    title : Text
    author : Party
  deriving (Eq, Show)

template BookLicense
  with
    publisher: Party
    reader: Party
    book: Book
  where
    signatory publisher
    observer reader

template Template t => Proposal t
  with
    proposer: Party
    receiver: Party
    proposal: t
  where
    signatory proposer
    observer receiver

    choice Accept: ContractId t
      controller receiver
      do
        create proposal

    choice Reject: ()
      controller receiver
      do
        pure ()

template BookVolumeLicenseCostlyProposal
  with
    proposal : BookVolumeLicense
    cost : Amount
  where
    signatory proposal.publisher
    observer proposal.reseller

    choice AcceptAndPay : ContractId BookVolumeLicense
      with
        cashId : ContractId Cash
      controller proposal.reseller
      do
        cash <- fetch cashId
        assert (cash.amount == cost)
        cashId <- exercise cashId Transfer with newOwner = proposal.publisher
        (bookDealId, bookDeal) <- fetchByKey @BookDeal
          ( proposal.book.author
          , proposal.publisher
          , proposal.book.isbn
          )
        (authorPart, _) <- exercise cashId Split with newAmount = cost.value * bookDeal.royalties
        create Iou
          with
            payer = proposal.publisher
            owner = proposal.book.author
            amount = authorPart
        create proposal

    choice RejectDontPay : ()
      controller proposal.reseller
        do
          pure ()

template BookDeal
  with
    author : Party
    publisher : Party
    royalties : Decimal
    book : Book
  where
    signatory author, publisher
    key (author, publisher, book.isbn) : (Party, Party, ISBN)
    maintainer key._1, key._2

template instance BookDealProposal = Proposal BookDeal

template BookVolumeLicense
  with
    publisher : Party
    reseller : Party
    volume : Int
    book : Book
  where
    signatory publisher, reseller
    ensure volume > 0
    key (reseller, book.isbn) : (Party, ISBN)
    maintainer key._1

    choice CreateLicense: ContractId BookLicense
      with
        reader : Party
      controller reseller
      do
        volumeLicense <-
          when (volume > 1) do
            create this with volume = volume - 1
            return ()
        create BookLicense with ..

testBookDeal = scenario
  do
    author <- getParty "BestAuthor"
    authorId <- author `submit` create Author with ..
    publisher <- getParty "BestPublisher"
    publisherId <- publisher `submit` create Publisher with ..
    reseller <- getParty "BestReseller"
    resellerId <- reseller `submit` create Reseller with ..
    let book = Book
          with
            author = author
            title = "The best book"
            content = "This is the best book"
            isbn = "b3st-isbn"
    let bookDeal = BookDeal
          with
            author = author
            publisher = publisher
            book = book
            royalties = 0.10
    bookDealProposalId <- author `submit` create Proposal
      with
        proposer = author
        receiver = publisher
        proposal = bookDeal
    bookDealId <- publisher `submit` exercise bookDealProposalId Accept 
    bookDeal <- publisher `submit` fetch bookDealId
    let bookVolumeLicense = BookVolumeLicense
          with
            volume = 100
            book = bookDeal.book
            ..
    bookVolumeProposal <- publisher `submit` exercise publisherId OfferBookVolume
      with
        price = Amount 1000.0 "CHF"
        volumeLicense = bookVolumeLicense
    cashId <- reseller `submit` create Cash
      with
        owner = reseller
        amount = Amount 1000.0 "CHF"
    volumeLicenseId <- reseller `submit` exercise bookVolumeProposal AcceptAndPay
      with
        cashId
    readerA <- getParty "Reader A"
    readerB <- getParty "Reader B"
    reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerA
    reseller `submit` exerciseByKey @BookVolumeLicense (reseller, book.isbn) CreateLicense
      with
        reader = readerB
    return ()

type AssetId = ContractId Asset

template Asset
  with
    issuer : Party
    owner  : Party
    name   : Text
  where
    ensure name /= ""
    signatory issuer
    controller owner can
      Give : AssetId
        with
          newOwner : Party
        do
          create this with
            owner = newOwner

setup = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  aliceTV <- submit alice do
    create Asset with
      issuer = alice
      owner = alice
      name = "TV"

  bobTV <- submit alice do
    exercise aliceTV Give with newOwner = bob

  submit bob do
    exercise bobTV Give with newOwner = alice
