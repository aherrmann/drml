-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Bankruptcy where
import Book
import DA.List
import DA.Time

template BankruptcyAgreement
  with
    bankruptReseller : Party
    newReseller : Party
    affectedParties : [Party] -- Hardcoded for simplicity to save time in the demo.
  where
    signatory bankruptReseller, newReseller
    observer affectedParties

    nonconsuming choice TransferVolumeLicense: ContractId BookVolumeLicense
      with
        isbn: ISBN
        publisher: Party
      controller publisher
      do
        (volumeLicenseId, volumeLicense) <- fetchByKey @BookVolumeLicense (bankruptReseller, isbn)
        archive volumeLicenseId
        create volumeLicense with reseller = newReseller

    nonconsuming choice TransferLicense: ContractId BookLicense
      with 
        isbn: ISBN
        reader: Party
      controller reader
      do
        (licenseId, license) <- fetchByKey @BookLicense (bankruptReseller, reader, isbn)
        archive licenseId
        create license with reseller = newReseller

template instance BankruptcyDeclaration = Proposal BankruptcyAgreement

demoAfterBankrupt = scenario do
  -- Initialize ledger with scenario from Book module.
  (Parties{..}, books) <- demoBeforeBankrupt

  -- Done in demo before bankrupt
  inDemoPurchaseBook (resellers!!0) (consumers!!0)
      
  let bankruptReseller = resellers!!0
  let newReseller = resellers!!2

  -- Reseller declares bankcruptcy
  let bankruptcyAgreement = BankruptcyAgreement with affectedParties = publishers ++ consumers; ..
  bankruptcyDeclaration <- resellers!!0 `submit` create Proposal with proposer = bankruptReseller; receiver = newReseller; proposal = bankruptcyAgreement

  -- NewReseller agrees to take over
  bankruptcyAgreement <- newReseller `submit` exercise bankruptcyDeclaration Accept

  -- For the demo...
  -- Transfer a single volume license
  publishers!!0 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!0; isbn = (books!!0).isbn
  -- Transfer a single individual license
  newLicense <- consumers!!0 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!0; isbn = (books!!0).isbn
  -- Grant a new reading permission
  newReseller `submit` exercise newLicense GrantReadingPermission with duration = days 14

  -- For the sake of completeness...
  -- Transfer remaining volume licenses
  publishers!!0 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!0; isbn = (books!!3).isbn
  publishers!!1 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!1; isbn = (books!!1).isbn
  publishers!!1 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!1; isbn = (books!!4).isbn
  publishers!!2 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!2; isbn = (books!!2).isbn
  publishers!!2 `submit` exercise bankruptcyAgreement TransferVolumeLicense with publisher = publishers!!2; isbn = (books!!5).isbn

  -- Transfer remaining individual licenses
  consumers!!0 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!0; isbn = (books!!4).isbn
  consumers!!1 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!1; isbn = (books!!2).isbn
  consumers!!1 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!1; isbn = (books!!3).isbn
  consumers!!2 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!2; isbn = (books!!1).isbn
  consumers!!2 `submit` exercise bankruptcyAgreement TransferLicense with reader = consumers!!2; isbn = (books!!5).isbn

  return ()
