-- Copyright (c) 2019 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Bankruptcy where
import Book

template BankruptcyAgreement
  with
    reseller : Party
    newReseller : Party
    affectedParties : [Party] -- Hardcoded for simplicity to save time in the demo.
  where
    signatory reseller, newReseller
    observer affectedParties

    nonconsuming choice TransferVolumeLicense: ContractId BookVolumeLicense
      with
        isbn: ISBN
        publisher: Party
      controller publisher
      do
        (volumeLicenseId, volumeLicense) <- fetchByKey @BookVolumeLicense (reseller, isbn)
        archive volumeLicenseId
        create volumeLicense with reseller = newReseller

    nonconsuming choice TransferLicense: ContractId BookLicense
      with 
        isbn: ISBN
        reader: Party
      controller reader
      do
        (licenseId, license) <- fetchByKey @BookLicense (reseller, reader, isbn)
        archive licenseId
        create license with reseller = newReseller

template instance BankruptcyDeclaration = Proposal BankruptcyAgreement

bankrupt = scenario do
  -- Initialize ledger with scenario from Book module.
  testBookDeal
      
  -- Constant definitions...
  let isbn = "b3st-isbn"
  publisher <- getParty "BestPublisher"
  reseller <- getParty "BestReseller"
  newReseller <- getParty "NewReseller"
  consumerA <- getParty "Consumer:A"
  consumerB <- getParty "Consumer:B"

  -- Reseller declares bankcruptcy
  let bankruptcyAgreement = BankruptcyAgreement with affectedParties = [publisher, consumerA, consumerB]; ..
  bankruptcyDeclaration <- reseller `submit` create Proposal with proposer = reseller; receiver = newReseller; proposal = bankruptcyAgreement

  -- NewReseller agrees to take over
  bankruptcyAgreement <- newReseller `submit` exercise bankruptcyDeclaration Accept

  -- Publisher transfers the volume license
  publisher `submit` exercise bankruptcyAgreement TransferVolumeLicense with ..

  -- Readers transfer their individual licenses
  consumerA `submit` exercise bankruptcyAgreement TransferLicense with reader = consumerA; ..
  consumerB `submit` exercise bankruptcyAgreement TransferLicense with reader = consumerB; ..

  return ()
